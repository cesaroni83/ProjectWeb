@page "/ListPaises"
@using ProjectWeb.ASM.Repositorio
@using ProjectWeb.Shared.Modelo.DTO.Pais
@using ProjectWeb.Shared.Modelo.Estatico
@using System.Collections

@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<PageTitle>Paises</PageTitle>
<ConfirmDialog @ref="dialog" />

<div class="centrado-pantalla">
    <div class="container-tabla">
        <Card style="width:93%; height:auto; margin:50px">
        <CardHeader class="text-center fs-4">
            Lista De Paises
        </CardHeader>
             <CardBody>
                 <Grid TItem="PaisDTO"
                      Class="table table-hover table-bordered"
                      FiltersRowCssClass="bg-primary text-white bg-opacity-25 border-bottom-0"
                      HeaderRowCssClass="bg-primary text-white border-bottom-0"
                      DataProvider="PaisDataProvider"
                      AllowFiltering="true"
                      AllowPaging="true"
                      PageSize="10"
                      AllowSorting="true"
                      AllowRowClick="true"
                      OnRowClick="OnrowClick"
                      Responsive="true"
                      @ref="grid">

                    <GridColumn TItem="PaisDTO" HeaderText="Foto" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                        <div class="text-center">
                            <Image Src="@ObtenerImagen(@context.Foto_pais)" Class="rounded" Alt="placeholder" style="width:50px; height:auto;" />
                        </div>
                    </GridColumn>

                    <GridColumn TItem="PaisDTO" HeaderText="Id País" PropertyName="Id_pais" SortString="Id_pais" SortKeySelector="item => item.Id_pais" FilterTextboxWidth="100" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                        <a href="/ListProv/@context.Id_pais/@context.Nombre_pais">@context.Id_pais</a>
                    </GridColumn>

                    <GridColumn TItem="PaisDTO" HeaderText="País" PropertyName="Nombre_pais" HeaderTextAlignment="Alignment.Center" SortString="Nombre_pais" SortKeySelector="item => item.Nombre_pais" FilterTextboxWidth="200">
                        @context.Nombre_pais
                    </GridColumn>

                    <GridColumn TItem="PaisDTO" HeaderText="Información" PropertyName="Informacion" SortString="Informacion" SortKeySelector="item => item.Informacion" FilterTextboxWidth="200">
                        @context.Informacion
                    </GridColumn>

                    <GridColumn TItem="PaisDTO" HeaderText="Estado" PropertyName="Estado_pais" HeaderTextAlignment="Alignment.Center" SortString="Estado_pais" SortKeySelector="item => item.Estado_pais" FilterTextboxWidth="100">
                        @Estado.GetTextEstado(@context.Estado_pais)
                    </GridColumn>

                    <GridColumn TItem="PaisDTO" HeaderText="Acción" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start" Filterable="false" FilterTextboxWidth="150">
                        <div class="d-flex justify-content-end gap-2" style="width:150px;">
                            <button class="btn btn-success btn-sm" @onclick=@(() => ShowModal(context.Id_pais, true))>Update</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteReg(context.Id_pais, context.Nombre_pais)">Delete</button>
                        </div>
                    </GridColumn>
                </Grid>
            </CardBody>
            <CardFooter class="d-flex justify-content-end ">
                <button class="btn btn-success"  @onclick=@(() => ShowModal())>Nuevo Registro</button>
            </CardFooter>
        </Card>
    </div>
</div>
@code {
    private ConfirmDialog dialog = default!;
    [Inject] ToastService ToastService { get; set; } = default!;

    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    public PaisDTO Input = new PaisDTO();
    private string? previewUrl;
    private List<PaisDTO> ListaPais { get; set; } = default!;
    private BlazorBootstrap.Grid<PaisDTO>? grid;
    private List<Estado> items = new();
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private async Task ShowModal(int id = 0, bool isEdit = false)

    {
        IModalReference modalReference;

        if (isEdit)
        {

            var parameters = new ModalParameters();
            parameters.Add("InputDTO", Input);
            parameters.Add("SubmitButtonText", "Update");
            parameters.Add("Titulo", "Modifica Datos De Pais");
            modalReference = Modal.Show<PaisComponent>(parameters);
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("InputDTO", Input=new());
            parameters.Add("SubmitButtonText", "Save");
            parameters.Add("Titulo", "Registro De Pais");
            modalReference = Modal.Show<PaisComponent>(parameters);
        }
        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await RefrescarGrid();
        }

    }
    private async Task LoadPais()
    {
        PreloadService.Show(SpinnerColor.Light, "Loading data...");
        var responseHttp = await repository.Get<List<PaisDTO>>("/api/Paises");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        ListaPais = responseHttp.Response?.ToList() ?? new List<PaisDTO>();
        StateHasChanged();
        PreloadService.Hide();


    }
    private async Task<GridDataProviderResult<PaisDTO>> PaisDataProvider(GridDataProviderRequest<PaisDTO> request)
    {
        if (ListaPais is null) // pull employees only one time for client-side filtering, sorting, and paging
            await LoadPais();
        return await Task.FromResult(request.ApplyTo(ListaPais));
    }
    private async Task OnrowClick(GridRowEventArgs<PaisDTO> args)
    {
        //await ModalService.ShowAsync(new ModalOption { Type = ModalType.Primary, Title = "Event: Row Click", Message = $"Id: {args.Item.Id_user}, Name: {args.Item.User_name}" });
        Input.Id_pais = args.Item.Id_pais;
        Input.Nombre_pais = args.Item.Nombre_pais;
        Input.Informacion = args.Item.Informacion;
        Input.Foto_pais = args.Item.Foto_pais;
        Input.Estado_pais = args.Item.Estado_pais;
        previewUrl = ObtenerImagen(Input.Foto_pais);
        return;
    }
    private string? ObtenerImagen(byte[]? bytes)
    {
        if (bytes == null || bytes.Length == 0)
            return null;

        string base64 = Convert.ToBase64String(bytes);
        return $"data:image/jpeg;base64,{base64}";
    }
    private byte[]? ObtenerBytes(string? base64Image)
    {
        if (string.IsNullOrWhiteSpace(base64Image))
            return null;

        // Si la cadena incluye el encabezado tipo "data:image/jpeg;base64,"
        var parts = base64Image.Split(',');
        string base64 = parts.Length > 1 ? parts[1] : parts[0];

        return Convert.FromBase64String(base64);
    }
    private async Task RefrescarGrid()
    {
        await LoadPais();
        await grid.RefreshDataAsync();
    }
    private async Task DeleteReg(int id, string nombre)
    {
        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Eliminacion De Regitro",
            message1: "Desea Eliminar El Pais?", 
            message2: "ID:" + id + "  Pais:" + nombre,
            confirmDialogOptions: options);
        
        if (confirmation)
        {
            // call API to delete the employee
            // show acknowledgment to the user
            var responseHttp = await repository.Delete($"/api/Paises/{Input.Id_pais}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Pais Eliminado con Exito!"));
            await RefrescarGrid();
            return;
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Operacion Cancelada!"));
        }
       
    }
}