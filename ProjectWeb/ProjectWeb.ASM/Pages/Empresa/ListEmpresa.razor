@page "/ListEmpresa"
@using ProjectWeb.ASM.Repositorio
@using ProjectWeb.Shared.Modelo.DTO.Empresa
@using ProjectWeb.Shared.Modelo.Estatico

@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject IRepository repository

<PageTitle>Empresa</PageTitle>
<ConfirmDialog @ref="dialog" />

<div class="centrado-pantalla">
    <div class="container-tabla">
        <Card style="width:93%; height:auto; margin:50px">
            <CardHeader class="text-center fs-4">
                Lista De Empresas
            </CardHeader>
            <CardBody>
                <Grid TItem="EmpresaDTO"
                      Class="table table-hover table-bordered"
                      FiltersRowCssClass="bg-primary text-white bg-opacity-25 border-bottom-0"
                      HeaderRowCssClass="bg-primary text-white border-bottom-0"
                      DataProvider="EmpresaDataProvider"
                      AllowFiltering="true"
                      AllowPaging="true"
                      PageSize="10"
                      AllowSorting="true"
                      AllowRowClick="true"
                      OnRowClick="OnrowClick"
                      Responsive="true"
                      @ref="grid">
                    <GridTemplates Class="gap-2">
                        <ExportLayout TItem="EmpresaDTO" GridRef="grid" Items="ListaEmpresa" />
                    </GridTemplates>
                    <GridColumn TItem="EmpresaDTO" HeaderText="Foto" FilterTextboxWidth="50" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                        <div class="text-center">
                            <Image Src="@ObtenerImagen(@context.Logo)" Class="rounded" Alt="placeholder" style="width:50px; height:auto;" />
                        </div>
                    </GridColumn>

                    <GridColumn TItem="EmpresaDTO" HeaderText="ID Empresa" PropertyName="Id_empresa" SortString="Id_empresa" SortKeySelector="item => item.Id_empresa" FilterTextboxWidth="100" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                        <a href="/ListSucursal/@context.Id_empresa/@context.Nombre_Empresa">@context.Id_empresa</a>
                    </GridColumn>

                    <GridColumn TItem="EmpresaDTO" HeaderText="Empresa" PropertyName="Nombre_Empresa" HeaderTextAlignment="Alignment.Center" SortString="Nombre_Empresa" SortKeySelector="item => item.Nombre_Empresa" FilterTextboxWidth="200">
                        @context.Nombre_Empresa
                    </GridColumn>
                    <GridColumn TItem="EmpresaDTO" HeaderText="Ruc" PropertyName="Ruc" SortString="Ruc" SortKeySelector="item => item.Ruc" FilterTextboxWidth="150">
                        @context.Ruc
                    </GridColumn>
                    <GridColumn TItem="EmpresaDTO" HeaderText="Razon Social" PropertyName="Razon_social" SortString="Razon_social" SortKeySelector="item => item.Razon_social" FilterTextboxWidth="150">
                        @context.Razon_social
                    </GridColumn>

                    <GridColumn TItem="EmpresaDTO" HeaderText="Telefono" PropertyName="Telefono" SortString="Telefono" SortKeySelector="item => item.Telefono" FilterTextboxWidth="100">
                        @context.Telefono
                    </GridColumn>
                    <GridColumn TItem="EmpresaDTO" HeaderText="Sitio Web" PropertyName="Pagina_web" SortString="Pagina_web" SortKeySelector="item => item.Pagina_web" FilterTextboxWidth="150">
                        @context.Pagina_web
                    </GridColumn>
                    <GridColumn TItem="EmpresaDTO" HeaderText="Email" PropertyName="Email" SortString="Email" SortKeySelector="item => item.Email" FilterTextboxWidth="150">
                        @context.Email
                    </GridColumn>

                    <GridColumn TItem="EmpresaDTO" HeaderText="Estado" PropertyName="Estado_empresa" HeaderTextAlignment="Alignment.Center" SortString="Estado_empresa" SortKeySelector="item => item.Estado_empresa" FilterTextboxWidth="100">
                        @Estado.GetTextEstado(@context.Estado_empresa)
                    </GridColumn>

                    <GridColumn TItem="EmpresaDTO" HeaderText="Acción" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start" Filterable="false" FilterTextboxWidth="150">
                        <div class="d-flex justify-content-end gap-2" style="width:150px;">
                            <button class="btn btn-success btn-sm" @onclick=@(() => ShowModal(context.Id_empresa, true))>Update</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteReg(context.Id_empresa, context.Nombre_Empresa)">Delete</button>
                        </div>
                    </GridColumn>
                </Grid>
            </CardBody>
            <CardFooter class="d-flex justify-content-end ">
                <button class="btn btn-success" @onclick=@(() => ShowModal())>Nuevo Registro</button>
            </CardFooter>
        </Card>
    </div>
</div>
@code {
    private ConfirmDialog dialog = default!;
    [Inject] ToastService ToastService { get; set; } = default!;

    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    public EmpresaDTO Input = new EmpresaDTO();
    private string? previewUrl;
    private List<EmpresaDTO> ListaEmpresa { get; set; } = default!;
    private BlazorBootstrap.Grid<EmpresaDTO>? grid;
    private List<Estado> items = new();
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    private async Task ShowModal(int id = 0, bool isEdit = false)

    {
        IModalReference modalReference;

        var options = new ModalOptions
        {
            Class = "modal-lg",
        };
        if (isEdit)
        {

            var parameters = new ModalParameters();
            parameters.Add("InputDTO", Input);
            parameters.Add("SubmitButtonText", "Update");
            parameters.Add("Titulo", " Modifica Datos De Empresa");
            modalReference = Modal.Show<EmpresaComponent>(parameters,options);
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("InputDTO", Input = new());
            parameters.Add("SubmitButtonText", "Save");
            parameters.Add("Titulo", " Registro De Empresa");
            modalReference = Modal.Show<EmpresaComponent>(parameters,options);
        }
        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await RefrescarGrid();
        }

    }
    private async Task LoadEmpresa()
    {
        try
        {
            PreloadService.Show(SpinnerColor.Light, "Loading data...");
            var responseHttp = await repository.Get<List<EmpresaDTO>>("/api/Empresas");
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                ListaEmpresa = new List<EmpresaDTO>(); // Evitar null
                return;
            }

            ListaEmpresa = responseHttp.Response?.ToList() ?? new List<EmpresaDTO>();
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
            ListaEmpresa = new List<EmpresaDTO>();
        }
        finally
        {
            StateHasChanged();
            PreloadService.Hide();
        }


    }
    private async Task<GridDataProviderResult<EmpresaDTO>> EmpresaDataProvider(GridDataProviderRequest<EmpresaDTO> request)
    {
        if (ListaEmpresa is null) // pull employees only one time for client-side filtering, sorting, and paging
            await LoadEmpresa();
        return await Task.FromResult(request.ApplyTo(ListaEmpresa!));
    }
    private async Task OnrowClick(GridRowEventArgs<EmpresaDTO> args)
    {
        //await ModalService.ShowAsync(new ModalOption { Type = ModalType.Primary, Title = "Event: Row Click", Message = $"Id: {args.Item.Id_user}, Name: {args.Item.User_name}" });
        Input.Id_empresa = args.Item.Id_empresa;
        Input.Nombre_Empresa = args.Item.Nombre_Empresa;
        Input.Razon_social = args.Item.Razon_social;
        Input.Ruc = args.Item.Ruc;
        Input.Id_ciudad = args.Item.Id_ciudad;
        Input.Direccion = args.Item.Direccion;
        Input.Cap = args.Item.Cap;
        Input.Telefono = args.Item.Telefono;
        Input.Telefono_secundario = args.Item.Telefono_secundario;
        Input.Pagina_web = args.Item.Pagina_web;
        Input.Email = args.Item.Email;
        Input.Tipo_empresa = args.Item.Tipo_empresa;
        Input.Representante_legal = args.Item.Representante_legal;
        Input.Capital_social = args.Item.Capital_social;
        Input.Estado_empresa = args.Item.Estado_empresa;
        Input.Logo = args.Item.Logo;
        previewUrl = ObtenerImagen(Input.Logo);
        return;
    }
    private string? ObtenerImagen(byte[]? bytes)
    {
        if (bytes == null || bytes.Length == 0)
            return null;

        string base64 = Convert.ToBase64String(bytes);
        return $"data:image/jpeg;base64,{base64}";
    }
    private byte[]? ObtenerBytes(string? base64Image)
    {
        if (string.IsNullOrWhiteSpace(base64Image))
            return null;

        // Si la cadena incluye el encabezado tipo "data:image/jpeg;base64,"
        var parts = base64Image.Split(',');
        string base64 = parts.Length > 1 ? parts[1] : parts[0];

        return Convert.FromBase64String(base64);
    }
    private async Task RefrescarGrid()
    {
        await LoadEmpresa();
        await grid!.RefreshDataAsync();
    }
    private async Task DeleteReg(int id, string nombre)
    {
        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Eliminacion De Regitro",
            message1: "Desea Eliminar El Empresa?",
            message2: "ID:" + id + "  Empresa:" + nombre,
            confirmDialogOptions: options);

        if (confirmation)
        {
            // call API to delete the employee
            // show acknowledgment to the user
            var responseHttp = await repository.Delete($"/api/Empresas/{Input.Id_empresa}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Empresa Eliminado con Exito!"));
            await RefrescarGrid();
            return;
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Operacion Cancelada!"));
        }

    }
}