@using ProjectWeb.ASM.Repositorio
@using ProjectWeb.Shared.Modelo.DTO.Ciudad
@using ProjectWeb.Shared.Modelo.DTO.Empresa
@using ProjectWeb.Shared.Modelo.DTO.Pais
@using ProjectWeb.Shared.Modelo.DTO.Provincia
@using ProjectWeb.Shared.Modelo.Estatico
@inject ToastService ToastService
@inject SweetAlertService sweetAlertService
@inject IRepository repository
@inject NavigationManager navigationManager

<div class="page-wrapper">
    <EditForm Model="@Input" OnValidSubmit="SubmitForm">
        <DataAnnotationsValidator />
        <div class="form-card">
            <!-- Título del formulario -->
            <h4 class="form-title"><i class="bi bi-ui-checks-grid"></i> @Titulo</h4>

            <!-- Tabs -->
            <Tabs class="custom-tabs">
                <!-- TAB 1: Datos Personales -->
                <Tab Title="Datos Empresa" Active="true">
                    <Content>
                        <div class="tab-content-inner">
                            <!-- Previsualización Imagen -->
                            <div class="img-preview-container">
                                <img src="@ImagePrev" class="img-preview" />
                                <i class="bi bi-camera icon-overlay"></i>
                            </div>
                            <InputFile OnChange="OnInputFileChange" class="mb-3" />
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>Nombre Empresa</label>
                                    <div class="input-icon">
                                        <i class="bi bi-building"></i>
                                        <InputText class="form-control" @bind-Value="Input.Nombre_Empresa" />
                                        <ValidationMessage For="() => Input.Nombre_Empresa" />
                                    </div>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>Razon Social</label>
                                    <div class="input-icon">
                                        <i class="bi bi-card-text"></i>
                                        <InputText class="form-control" @bind-Value="Input.Razon_social" />
                                        <ValidationMessage For="() => Input.Razon_social" />
                                    </div>
                                </div>
                            </div>
                            <!-- Fila 2:  -->
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>R.U.C.</label>
                                    <div class="input-icon">
                                        <i class="bi bi-file-earmark-text"></i>
                                        <InputText class="form-control" @bind-Value="Input.Ruc" />
                                        <ValidationMessage For="() => Input.Ruc" />
                                    </div>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>Tipo empresa</label>
                                    <div class="input-icon">
                                        <i class="bi bi-briefcase"></i>
                                        <InputText class="form-control" @bind-Value="Input.Tipo_empresa" />
                                        <ValidationMessage For="() => Input.Tipo_empresa" />
                                    </div>
                                </div>
                            </div>
                            <!-- Fila 3: Nacionalidad y Fecha Nacimiento -->
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>Representante Legal</label>
                                    <div class="input-icon">
                                        <i class="bi bi-person-badge"></i>
                                        <InputText class="form-control" @bind-Value="Input.Representante_legal" />
                                        <ValidationMessage For="() => Input.Representante_legal" />
                                    </div>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>Capital Social</label>
                                    <div class="input-icon">
                                        <i class="bi bi-currency-dollar"></i>
                                        <CurrencyInput class="form-control" @bind-Value="Input.Capital_social" />
                                        <ValidationMessage For="() => Input.Capital_social" />
                                    </div>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>Estado</label>
                                    <div class="input-icon">
                                        <i class="bi bi-toggle-on"></i>
                                        <InputSelect @bind-Value="Input.Estado_empresa" class="form-control">
                                            <option value=""> -- Seleccione --</option>
                                            @foreach (var item in items)
                                            {
                                                <option value="@item.Id">@item.Text</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="() => Input.Estado_empresa" />
                                    </div>
                                </div>
                                <div class="form-group col-md-6">
                                    @* <label>Ocupación</label>
                                    <div class="input-icon">
                                        <i class="bi bi-briefcase"></i>
                                        <InputText class="form-control" @bind-Value="Input.Ocupacion" />
                                    </div> *@
                                </div>
                            </div>

                        </div>
                    </Content>
                </Tab>

                <!-- TAB 2: Contacto -->
                <Tab Title="Contacto">
                    <Content>
                        <div class="tab-content-inner">
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>Pais</label>
                                    <div class="input-icon">
                                        <i class="bi bi-globe"></i>
                                        <select class="form-control" @onchange="CountryChangedAsync">
                                            <option value="">-- Seleccione --</option>
                                            @if (countries is not null)
                                            {
                                                @foreach (var country in countries)
                                                {
                                                    <option value="@country.Id_pais" selected="@(country.Id_pais == empresa?.Ciudades?.Provincias?.Paises?.Id_pais)">@country.Nombre_pais</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>Provincia</label>
                                    <div class="input-icon">
                                        <i class="bi bi-map"></i>
                                        <select class="form-control" @onchange="StateChangedAsync">
                                            <option value="">-- Seleccione --</option>
                                            @if (states is not null)
                                            {
                                                @foreach (var state in states)
                                                {
                                                    <option value="@state.Id_provincia" selected="@(state.Id_provincia == empresa?.Ciudades?.Provincias?.Id_provincia)">@state.Nombre_provincia</option>
                                                }
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>Ciudad</label>
                                    <div class="input-icon">
                                        <i class="bi bi-buildings"></i>
                                        <select class="form-control" @bind="empresa.Id_ciudad">
                                            <option value="">Seleccione Ciudad</option>
                                            @if (cities is not null)
                                            {
                                                @foreach (var city in cities)
                                                {
                                                    <option value="@city.Id_ciudad" selected="@(city.Id_ciudad == empresa?.Ciudades?.Id_ciudad)">@city.Nombre_ciudad </option>
                                                }
                                            }
                                        </select>
                                        <ValidationMessage For="() => Input.Id_ciudad" />
                                    </div>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>CAP</label>
                                    <div class="input-icon">
                                        <i class="bi bi-mailbox2"></i>
                                        <InputText class="form-control" @bind-Value="Input.Cap" />
                                        <ValidationMessage For="() => Input.Cap" />
                                    </div>
                                </div>
                            </div>

                            <div class="form-group mt-3">
                                <label>Dirección</label>
                                <div class="input-icon">
                                    <i class="bi bi-geo-alt"></i>
                                    <InputText class="form-control" @bind-Value="Input.Direccion" />
                                    <ValidationMessage For="() => Input.Direccion" />
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>Teléfono</label>
                                    <div class="input-icon">
                                        <i class="bi bi-telephone"></i>
                                        <InputText class="form-control" @bind-Value="Input.Telefono" />
                                    </div>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>Telefono Secundario</label>
                                    <div class="input-icon">
                                        <i class="bi bi-telephone-plus"></i>
                                        <InputText class="form-control" @bind-Value="Input.Telefono_secundario" />
                                        
                                    </div>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label>Sitio Web</label>
                                    <div class="input-icon">
                                        <i class="bi bi-globe2"></i>
                                        <InputText class="form-control" @bind-Value="Input.Pagina_web" />
                                    </div>
                                </div>
                                <div class="form-group col-md-6">
                                    <label>Email</label>
                                    <div class="input-icon">
                                        <i class="bi bi-envelope"></i>
                                        <InputText class="form-control" @bind-Value="Input.Email" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </Content>
                </Tab>

                

            </Tabs>

            <!-- Botones -->
            <div class="text-center mt-4">
                <button type="submit" class="btn btn-success btn-custom me-2">
                    <i class="bi bi-save"></i> @SubmitButtonText
                </button>
                <button type="button" class="btn btn-outline-secondary btn-custom" @onclick="Cancelar">
                    <i class="bi bi-eraser"></i> Cancelar
                </button>
            </div>
        </div>
    </EditForm>
</div>



@code {
    [CascadingParameter] BlazoredModalInstance Modal { get; set; } = default!;
    [Parameter] public EmpresaDTO InputDTO { get; set; } = new EmpresaDTO();
    [Parameter] public string SubmitButtonText { get; set; } = string.Empty;
    [Parameter] public string Titulo { get; set; } = string.Empty;


    private EmpresaDTO Input = new();
    private List<Estado> items = new();
    private string? ImagePrev;

    private List<PaisDropDTO>? countries;
    private List<ProvinciaDropDTO>? states;
    private List<CiudadDropDTO>? cities;
    private string Estados = "A";
    private EmpresaDTO? empresa { get; set; } = new EmpresaDTO
    {
        Ciudades = new CiudadDTO
        {
            Provincias = new ProvinciaDTO
            {
                Paises = new PaisDTO()
            }
        }
    };
    protected override async Task OnInitializedAsync()
    {
        // Carica gli items dello stato
        items = Estado.GetItems();

        // Carica i paesi
        await LoadCountriesAsync();

        // Se abbiamo un input con nome
        if (!string.IsNullOrEmpty(InputDTO.Nombre_Empresa))
        {
            // Carica l'empresa dal servizio
            await LoadEmpresaAsyc();

            // Se l'empresa è null o le proprietà annidate sono null, usiamo default
            var paisId = empresa?.Ciudades?.Provincias?.Paises?.Id_pais;
            var provinciaId = empresa?.Ciudades?.Provincias?.Id_provincia;

            if (paisId.HasValue)
                await LoadStatesAsyn(paisId.Value);

            if (provinciaId.HasValue)
                await LoadCitiesAsyn(provinciaId.Value);

            // Copia InputDTO nell'Input usato nel form
            Input = InputDTO;

            // Prepara l'anteprima dell'immagine solo se esiste
            ImagePrev = Input.Logo != null
                ? $"data:image/jpeg;base64,{Convert.ToBase64String(Input.Logo)}"
                : null;
        }
    }
    
    private async Task LoadEmpresaAsyc()
    {
        var responseHTTP = await repository.Get<EmpresaDTO>($"/api/Empresas/GetEmpresaAllDate/{InputDTO.Id_empresa}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }
            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        empresa = responseHTTP.Response;
    }

    private async Task CargarImagen(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            using var stream = archivo.OpenReadStream(10_000_000);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            ImagePrev = $"data:{archivo.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}";
        }
    }

    private async Task SubmitForm()
    {
        Input.Logo = ImagePrev != null ? Convert.FromBase64String(ImagePrev.Split(',')[1]) : null;
        Input.Id_ciudad = empresa!.Id_ciudad;
        if (SubmitButtonText == "Save")
        {
            var responseHttp = await repository.Post<EmpresaDTO>("/api/Empresas/CreateEmpresa", Input);
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            ToastService.Notify(new(ToastType.Success, $"Record Empresa Saved Successfully."));
            await Task.Delay(3000);
            await Modal.CloseAsync(ModalResult.Ok(Input));
            return;
        }
        if (SubmitButtonText == "Update")
        {
            var responseHttp = await repository.Put<EmpresaDTO>($"/api/Empresas/{Input.Id_empresa}", Input);
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }

            ToastService.Notify(new(ToastType.Success, $"Record Empresa Updated Successfully."));
            await Task.Delay(3000);
            await Modal.CloseAsync(ModalResult.Ok(Input));
            return;
        }
    }

    private async Task Cancelar()
    {
        await Modal.CancelAsync();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        ImagePrev = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task LoadCountriesAsync()
    {
        var responseHttp = await repository.Get<List<PaisDropDTO>>($"/api/Paises/ComboPais/{Estados}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
    }

    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.Get<List<ProvinciaDropDTO>>($"/api/Provincias/ComboProvincia/{countryId}/{Estados}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
    }

    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.Get<List<CiudadDropDTO>>($"/api/Ciudades/ComboCiudades/{stateId}/{Estados}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        await LoadStatesAsyn(selectedCountry);
    }

    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        await LoadCitiesAsyn(selectedState);
    }
}

