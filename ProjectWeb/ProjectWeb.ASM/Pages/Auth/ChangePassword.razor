@page "/ChangePassword"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ProjectWeb.ASM.Repositorio
@using ProjectWeb.Shared.Account
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (loading)
{
    <div class="spinner" />
}
<div class="principal">
    <div class="change-password-container">
        <!-- Panel izquierdo (Formulario) -->
        <div class="form-left-white">
            <h2>Restablecer contraseña</h2>
            <p>Introduce tu correo electrónico para restablecer tu contraseña</p>
            <EditForm class="reset-password-form" Model="changePasswordDTO" OnValidSubmit="ChangePasswordAsync">
                <DataAnnotationsValidator />
                <div class="mb-3 w-100">
                    <label class="form-label">Password Actual</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input type="password" class="form-control" @bind-value="changePasswordDTO.CurrentPassword" placeholder="Current Password" />
                        <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />
                    </div>
                </div>
                <div class="mb-3 w-100">
                    <label class="form-label">Nueva Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input type="password" class="form-control" @bind-value="changePasswordDTO.NewPassword" placeholder="New Password" />
                        <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />
                    </div>
                </div>
                <div class="mb-3 w-100">
                    <label class="form-label">Cofirme Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input type="password" class="form-control" @bind-value="changePasswordDTO.Confirm" placeholder="Confirm Password" />
                        <ValidationMessage For="@(() => changePasswordDTO.Confirm)" />
                    </div>
                </div>
                <div class="form-buttons">
                    <button type="submit">Enviar</button>
                    <button type="reset">Cancelar</button>
                </div>
            </EditForm>
        </div>

        <!-- Panel derecho (Información) -->
        <div class="form-right-blue">
            <h2>¡Bienvenido!</h2>
            <AuthorizeView>
                <h3>@context.User.Identity!.Name</h3>
            </AuthorizeView>
            <p>¿Deseas Modifica tus Datos?</p>
            <button @onclick="Edit_user">Setting</button>
        </div>
    </div>

</div>


@code {
    private ChangePasswordDTO changePasswordDTO = new();
    private bool loading;

    private async Task ChangePasswordAsync()
    {
        loading = true;
        var responseHttp = await repository.Post("/api/Accounts/changePassword", changePasswordDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        navigationManager.NavigateTo("/editUser");
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.TopEnd,
            ShowConfirmButton = true,
            Timer = 5000
        });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Contraseña cambiada con éxito.");
    }
    private void Edit_user()
    {
        navigationManager.NavigateTo("/EditUser");
    }
}