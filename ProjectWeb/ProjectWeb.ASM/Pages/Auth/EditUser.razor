@page "/EditUser"
@using ProjectWeb.ASM.Repositorio
@using ProjectWeb.Shared.Account
@using ProjectWeb.Shared.Enums
@using ProjectWeb.Shared.Modelo.DTO.Ciudad
@using ProjectWeb.Shared.Modelo.DTO.Pais
@using ProjectWeb.Shared.Modelo.DTO.Provincia
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService

@if (user is null)
{
    <div class="spinner" />
}
else
{

    <!-- Font Awesome -->
    <div class="principal">
        <div class="login-register-container">
            <div class="form-wrapper" id="formWrapper">
                <div class="form-panel">
                    <div class="form-left-white w-100">
                        <h2>Edit User</h2>
                        <EditForm class="register-form row g-3" Model="user" OnValidSubmit="SaveUserAsync" FormName="EditUser">
                            <DataAnnotationsValidator />
                            <Tabs EnableFadeEffect="true" id="formTab" class="tab-content active">
                                <Tab Active="true">
                                    <TitleTemplate>
                                        <Icon Name="IconName.HouseFill" /> Edit User
                                    </TitleTemplate>
                                    <Content>
                                        <div class="tab-content active">
                                            <!-- Contenedor de 2 columnas -->
                                            <div class="row g-3">
                                                <!-- Formulario -->
                                                <div class="col-md-6">
                                                    <label class="form-label">Nombre</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                                                        <input class="form-control" @bind-value="user.FirstName" placeholder="Nombre" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Apellido</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                                                        <input class="form-control" @bind-value="user.LastName" placeholder="Apellido" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Teléfono</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text"><i class="fas fa-phone"></i></span>
                                                        <input type="tel" class="form-control" @bind-value="user.PhoneNumber" placeholder="Teléfono" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Pais</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text"><i class="fas fa-globe"></i></span>
                                                        <select class="form-select" @onchange="CountryChangedAsync">
                                                            <option value="">Seleccione País</option>
                                                            @if (countries is not null)
                                                            {
                                                                @foreach (var country in countries)
                                                                {
                                                                    <option value="@country.Id_pais" selected="@(country.Id_pais == user.Ciudades!.Provincias!.Paises!.Id_pais)">@country.Nombre_pais</option>
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Provincia</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text"><i class="fas fa-map"></i></span>
                                                        <select class="form-select" @onchange="StateChangedAsync">
                                                            <option value="">-- Seleccione un estado/departamento --</option>
                                                            @if (states is not null)
                                                            {
                                                                @foreach (var state in states)
                                                                {
                                                                    <option value="@state.Id_provincia" selected="@(state.Id_provincia == user.Ciudades!.Provincias!.Id_provincia)">@state.Nombre_provincia</option>
                                                                }
                                                            }
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <label class="form-label">Ciudad</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text"><i class="fas fa-city"></i></span>
                                                        <select class="form-select" @bind="user.Id_ciudad">
                                                            <option value="">Seleccione Ciudad</option>
                                                            @if (cities is not null)
                                                            {
                                                                @foreach (var city in cities)
                                                                {
                                                                    <option value="@city.Id_ciudad" selected="@(city.Id_ciudad == user.Ciudades!.Id_ciudad)">@city.Nombre_ciudad </option>
                                                                }
                                                            }
                                                        </select>
                                                        <ValidationMessage For="@(() => user.Id_ciudad)" />
                                                    </div>
                                                </div>
                                                <div class="col-md-6 col-unir">
                                                    <label class="form-label">Direccion</label>
                                                    <div class="input-group">
                                                        <span class="input-group-text"><i class="fas fa-street-view"></i></span>
                                                        <input type="text" class="form-control" @bind-value="user.Address" placeholder="Direccion" />
                                                    </div>
                                                </div>
                                                <div class="col-12 d-flex justify-content-center gap-2 mt-3">
                                                    <button type="submit" class="btn btn-primary">Save</button>
                                                    <button type="reset" class="btn btn-secondary">Reset</button>
                                                </div>
                                            </div>
                                        </div>
                                    </Content>
                                </Tab>
                                <Tab>
                                    <TitleTemplate>
                                        <Icon Name="IconName.PersonFill" /> Fotos
                                    </TitleTemplate>
                                    <Content>
                                        <div class="upload-form text-center mt-3">
                                            <label for="profileImage" class="form-label fw-bold">Selecciona una imagen para tu perfil:</label>
                                            <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                                            <button type="submit" class="btn btn-primary mt-3">Subir Imagen</button>
                                        </div>
                                    </Content>
                                </Tab>
                            </Tabs>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>

}



@code {
    private User? user;
    private List<PaisDropDTO>? countries;
    private List<ProvinciaDropDTO>? states;
    private List<CiudadDropDTO>? cities;
    private string? imageUrl;
    string Estado = "A";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsyc();
        await LoadCountriesAsync();
        await LoadStatesAsyn(user!.Ciudades!.Provincias!.Paises!.Id_pais);
        await LoadCitiesAsyn(user!.Ciudades!.Provincias!.Id_provincia);

        if (!string.IsNullOrEmpty(user!.Photo))
        {
            imageUrl = user.Photo;
            user.Photo = null;
        }

    }

    private async Task LoadUserAsyc()
    {
        var responseHTTP = await repository.Get<User>($"/api/Accounts");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }
            var messageError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        user = responseHTTP.Response;
    }

    private void ImageSelected(string imagenBase64)
    {
        user!.Photo = imagenBase64;
        imageUrl = null;
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        await LoadStatesAsyn(selectedCountry);
    }

    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        await LoadCitiesAsyn(selectedState);
    }

    private async Task LoadCountriesAsync()
    {
        var responseHttp = await repository.Get<List<PaisDropDTO>>($"/api/Paises/ComboPais/{Estado}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
    }

    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.Get<List<ProvinciaDropDTO>>($"/api/Provincias/ComboProvincia/{countryId}/{Estado}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
    }

    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.Get<List<CiudadDropDTO>>($"/api/Ciudades/ComboCiudades/{stateId}/{Estado}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;
    }

    private async Task SaveUserAsync()
    {
        var responseHttp = await repository.Put<User, TokenDTO>("/api/Accounts", user!);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}