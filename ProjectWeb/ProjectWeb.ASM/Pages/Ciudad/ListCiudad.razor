@page "/ListCiudad/{IdProvincia:int}/{ProvinciaName}"

@using ProjectWeb.ASM.Repositorio
@using ProjectWeb.Shared.Modelo.DTO.Ciudad
@using ProjectWeb.Shared.Modelo.Estatico
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager NavManager

<PageTitle>Ciudad</PageTitle>
<ConfirmDialog @ref="dialog" />

 <div class="centrado-pantalla">
    <div class="container-tabla">
        <div class="d-flex justify-content-lg-start">
           <button class="btn btn-link text-decoration-none" @onclick="NavigateBack">
                    <i class="fa-solid fa-arrow-left"></i>
                </button>
        </div>
        <Card style="width:93%; height:auto; margin:50px">
            <CardHeader class="text-center fs-4">
                Lista De Ciudades De @ProvinciaName
            </CardHeader>
            <CardBody>
                <Grid TItem="CiudadDTO"
                      Class="table table-hover table-bordered"
                      FiltersRowCssClass="bg-primary text-white bg-opacity-25 border-bottom-0"
                      HeaderRowCssClass="bg-primary text-white border-bottom-0"
                      DataProvider="ProvinciaDataProvider"
                      AllowFiltering="true"
                      AllowPaging="true"
                      PageSize="10"
                      AllowSorting="true"
                      AllowRowClick="true"
                      OnRowClick="OnrowClick"
                      Responsive="true"
                      @ref="grid">
                    <GridTemplates Class="gap-2">
                        <ExportLayout TItem="CiudadDTO" GridRef="grid" Items="ListaCiudad" />
                    </GridTemplates>
                    <GridColumn TItem="CiudadDTO" HeaderText="Id Ciudad" PropertyName="Id_ciudad" SortString="Id_ciudad" SortKeySelector="item => item.Id_ciudad" FilterTextboxWidth="100" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                        @context.Id_ciudad
                    </GridColumn>

                    <GridColumn TItem="CiudadDTO" HeaderText="Provincia" PropertyName="Nombre_ciudad" HeaderTextAlignment="Alignment.Center" SortString="Nombre_ciudad" SortKeySelector="item => item.Nombre_ciudad" FilterTextboxWidth="200">
                        @context.Nombre_ciudad
                    </GridColumn>

                    <GridColumn TItem="CiudadDTO" HeaderText="Información" PropertyName="Informacion_ciudad" SortString="Informacion_ciudad" SortKeySelector="item => item.Informacion_ciudad" FilterTextboxWidth="200">
                        @context.Informacion_ciudad
                    </GridColumn>

                    <GridColumn TItem="CiudadDTO" HeaderText="Estado" PropertyName="Estado_provincia" HeaderTextAlignment="Alignment.Center" SortString="Estado_provincia" SortKeySelector="item => item.Estado_ciudad" FilterTextboxWidth="100">
                        @Estado.GetTextEstado(@context.Estado_ciudad)
                    </GridColumn>

                    <GridColumn TItem="CiudadDTO" HeaderText="Acción" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Start" Filterable="false" FilterTextboxWidth="150">
                        <div class="d-flex justify-content-end gap-2" style="width:150px;">
                            <button class="btn btn-success btn-sm" @onclick=@(() => ShowModal(@context.Id_ciudad, true))>Update</button> 
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteReg(context.Id_ciudad, context.Nombre_ciudad)">Delete</button>
                        </div>
                    </GridColumn>
                </Grid>
            </CardBody>
            <CardFooter class="d-flex justify-content-end ">
                <button class="btn btn-success" @onclick=@(() => ShowModal())>Nuevo Registro</button>
            </CardFooter>
        </Card>
    </div>
</div> 




@code {

    [Parameter] public int IdProvincia { get; set; }
    [Parameter] public string ProvinciaName { get; set; } = string.Empty;
    private ConfirmDialog dialog = default!;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    public CiudadDTO Input = new CiudadDTO();
    public CiudadDTO ReturnUrl = new CiudadDTO();
    private List<CiudadDTO> ListaCiudad { get; set; } = default!;
    private BlazorBootstrap.Grid<CiudadDTO>? grid;
    private List<Estado> items = new();
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;
    [Inject] ToastService ToastService { get; set; } = default!;

    private async Task ShowModal(int id = 0, bool isEdit = false)

    {
        IModalReference modalReference;

        if (isEdit)
        {
            // Crear args como en el paso anterior
            var parameters = new ModalParameters();
            parameters.Add("InputDTO", Input);
            parameters.Add("SubmitButtonText", "Update");
            parameters.Add("Titulo", "Modifica Datos De Ciudades");
            modalReference = Modal.Show<CiudadComponent>(parameters);
        }
        else
        {
            var parameters = new ModalParameters();
            parameters.Add("InputDTO", Input);
            parameters.Add("SubmitButtonText", "Save");
            parameters.Add("Titulo", "Registro De Ciudades");
            modalReference = Modal.Show<CiudadComponent>(parameters);
        }
        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await RefrescarGrid();
        }

    }

    private async Task<GridDataProviderResult<CiudadDTO>> ProvinciaDataProvider(GridDataProviderRequest<CiudadDTO> request)
    {
        if (ListaCiudad is null) // pull employees only one time for client-side filtering, sorting, and paging
            await LoadProvincia();
        return await Task.FromResult(request.ApplyTo(ListaCiudad));
    }

    private async Task OnrowClick(GridRowEventArgs<CiudadDTO> args)
    {
        //await ModalService.ShowAsync(new ModalOption { Type = ModalType.Primary, Title = "Event: Row Click", Message = $"Id: {args.Item.Id_user}, Name: {args.Item.User_name}" });
        //Input.Id_provincia = args.Item.Id_provincia;
        Input.Id_ciudad = args.Item.Id_ciudad;
        Input.Nombre_ciudad = args.Item.Nombre_ciudad;
        Input.Informacion_ciudad = args.Item.Informacion_ciudad;
        Input.Estado_ciudad = args.Item.Estado_ciudad;
        //Input.Provincias.Paises.Id_pais = args.Item.Provincias.Paises.Id_pais;

        return;
    }

    private async Task LoadProvincia()
    {
        PreloadService.Show(SpinnerColor.Light, "Loading data...");
        var responseHttp = await repository.Get<List<CiudadDTO>>($"/api/Ciudades/CiudadesByProvincia/{IdProvincia}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        ListaCiudad = responseHttp.Response?.ToList() ?? new List<CiudadDTO>();
        StateHasChanged();
        // ✅ Asigna el primer elemento de forma segura
        ReturnUrl = ListaCiudad.FirstOrDefault() ?? new CiudadDTO();
        PreloadService.Hide();
    }

    private async Task RefrescarGrid()
    {
        await LoadProvincia();
        await grid.RefreshDataAsync();
    }
    private void NavigateBack()
    {
        if (ReturnUrl?.Provincias?.Paises is not null)
        {
            NavManager.NavigateTo($"/ListProv/{ReturnUrl.Provincias!.Id_pais}/{ReturnUrl.Provincias.Paises!.Nombre_pais}");
        }
        else
        {
            NavManager.NavigateTo("/ListPaises");
        }
    }
    private async Task DeleteReg(int id, string nombre)
    {
        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(
            title: "Eliminacion De Regitro",
            message1: "Desea Eliminar La Ciudad?",
            message2: "ID:" + id + "  Ciudad:" + nombre,
            confirmDialogOptions: options);

        if (confirmation)
        {
            // call API to delete the employee
            // show acknowledgment to the user
            var responseHttp = await repository.Delete($"/api/Ciudades/{Input.Id_ciudad}");
            if (responseHttp.Error)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            ToastService.Notify(new ToastMessage(ToastType.Success, $"Pais Eliminado con Exito!"));
            await RefrescarGrid();
            return;
        }
        else
        {
            ToastService.Notify(new ToastMessage(ToastType.Secondary, $"Operacion Cancelada!"));
        }

    }
}
